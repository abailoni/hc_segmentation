segm_pipeline_type: 'gen_HC'
nb_threads: 8
invert_affinities: True
blockwise: False
return_fragments: False
use_final_agglomerater: False
stacking_2D: False

blockwise_kwargs:
  crop_padding: True
  nb_parallel_blocks: 20
  num_workers: 1

MWS_kwargs:
  stride:
    - 1
    - 12
    - 12

start_from_given_segm: False

use_fragmenter: True
fragmenter: 'WSDT'


WSDT_kwargs:
  threshold: 0.4
  from_boundary_maps: true
  min_segment_size: 20 # THIS SHOULD NOT BE PUT TO ZERO...!
  preserve_membrane: True
  sigma_seeds: 0.1
  stacked_2d: True

prob_map_kwargs:
#    offset_weights: [1.0, 1.0, 0.8, 0.8, 0.8, 0.8]
#    used_offsets: [1, 2, 4, 5, 7, 8]
    offset_weights: [1.0, 1.0]
    used_offsets: [1, 2]


multicut_kwargs:
  weighting_scheme: 'all' # "all", "z", "xyz", None
  solver_type: 'multicutIlpCplex' # fusionMoves, kernighanLin, multicutIlpCplex, ccFusionMoveBased
#  time_limit: 120
  weight: 16.
  verbose_visitNth: 100
  max_distance_lifted_edges: 1
  offsets_weights: [1., 1., 1.,
                      1., 1., 1., 1.,
                      9., 9., 9., 9., 9., 9., 9., 9.,
                      27., 27.]
#  used_offsets: [0,1,2]



generalized_HC_kwargs:

  nb_local_offsets: 3
  probability_long_range_edges: 0.1

  agglomeration_kwargs:
    zero_init: False
    max_distance_lifted_edges: 1
    update_rule_merge: 'mean'
    update_rule_not_merge: 'mean'
#    offsets_weights: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
#    offsets_weights: [1., 1., 1., 2., 3, 3, 3, 9, 9, 4, 27, 27]
#    offsets_weights: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3]
#    offsets_weights: [1., 1., 1.,
#                      1., 1., 1., 1.,
#                      9., 9., 9., 9., 9., 9., 9., 9.,
#                      27., 27.]
    offsets_weights: [1., 1., 1.,
                      1., 1., 1., 1.,
                      1., 1., 1., 1., 1., 1., 1., 1.,
                      1., 1.]
#    offsets_weights: [100., 1., 1.,
#                      100., 100., 100., 100.,
#                      1., 1., 1., 1., 1., 1., 1., 1.,
#                      1., 1.]
#    offsets_weights: [1., 1., 1.,
#                      3., 3., 3., 3.,
#                      5., 5., 5., 5.,
#                      2., 3.,
#                      9., 9., 9., 9., 9., 9., 9., 9., 9., 9.,
#                      20., 20., 20., 20.]
#    used_offsets: [0,1,2]
    # update_rule_merge={'name': 'rank', 'q':0.5, 'numberOfBins':200},
    # update_rule_not_merge={'name': 'rank', 'q':0.5, 'numberOfBins':200},
    # update_rule_merge={'name': 'generalized_mean', 'p': 1.0},
    # update_rule_not_merge={'name': 'generalized_mean', 'p': 1.0},
    extra_aggl_kwargs:
      sizeRegularizer: 0.
      sizeThreshMin: 0.
      sizeThresMax: 120.
      postponeThresholding: False
      threshold: 0.50 # Merge all: 0.0; split all: 1.0
    extra_runAggl_kwargs:
      verbose: True
      printNth: 100000

  final_agglomeration_kwargs:
    zero_init: False
    max_distance_lifted_edges: 1
    update_rule_merge: 'mean'
    update_rule_not_merge: 'mean'
#    offsets_weights: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
#    offsets_weights: [1., 1., 1., 2., 3, 3, 3, 9, 9, 4, 27, 27]
#    offsets_weights: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3]
    offsets_weights: [1., 1., 1.,
                      1., 1., 1., 1.,
                      9., 9., 9., 9., 9., 9., 9., 9.,
                      27., 27.]
#    offsets_weights: [1., 1., 1.,
#                      3., 3., 3., 3.,
#                      5., 5., 5., 5.,
#                      2., 3.,
#                      9., 9., 9., 9., 9., 9., 9., 9., 9., 9.,
#                      20., 20., 20., 20.]
#    used_offsets: [0,1,2]
    # update_rule_merge={'name': 'rank', 'q':0.5, 'numberOfBins':200},
    # update_rule_not_merge={'name': 'rank', 'q':0.5, 'numberOfBins':200},
    # update_rule_merge={'name': 'generalized_mean', 'p': 1.0},
    # update_rule_not_merge={'name': 'generalized_mean', 'p': 1.0},
    extra_aggl_kwargs:
      sizeRegularizer: 0.
      sizeThreshMin: 0.
      sizeThresMax: 120.
      postponeThresholding: False
      threshold: 0.5 # Merge all: 0.0; split all: 1.0
    extra_runAggl_kwargs:
      verbose: True
      printNth: 100000


volume_config:
  affinities:
    dtype: float32
    path_in_h5_dataset:
      A: data
      B: data
      C: data
    slicing_config:
      downsampling_ratio:
        A: [1, 1, 1, 1]
        B: [1, 1, 1, 1]
        C: [1, 1, 1, 1]
      volume_already_padded:
        A: True
        B: True
        C: True
      padding:
        A: [[0 ,0], [1, 1], [0 ,0], [0 ,0]]
        B: [[0 ,0], [1, 1], [0 ,0], [0 ,0]]
        C: [[0 ,0], [1, 1], [0 ,0], [0 ,0]]
      stride:
        A: [12, 1, 600, 600]
        B: [12, 1, 600, 600]
        C: [12, 1, 600, 600]
      window_size:
        A: [None, 3, None, None]
        B: [None, 3, None, None]
        C: [None, 3, None, None]

data_slice:
#  A: ':, :, 100:-100, 100:-100'
#  B: ':, :, 100:1330, 665:1750'
#  C: ':, :, 150:-150, 150:-150'
  A: ':, :, :, :'
  B: ':, :, :, :'
  C: ':, :, :, :'
#  A: ':, 30:40, 500:700, 500:700'
#  B: ':, 30:40, 500:700, 500:700'
#  C: ':, 30:40, 500:700, 500:700'




