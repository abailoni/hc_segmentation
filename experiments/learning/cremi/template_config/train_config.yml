# Use this for the 3D model:
model_name: DynamicUNet3DMultiscale

pretrained_model_kwargs:
  add_residual_connections: true
  conv_type_key: conv_bn
  fmap_growth: 3
  in_channels: 13
  initial_num_fmaps: 34
  out_channels: 12
  scale_factor:
  - [1, 3, 3]
  - [1, 2, 2]
  - [1, 2, 2]
  final_activation: Sigmoid


# THIS MODEL PARAMETERS ARE IGNORED FOR THE MOMENT:
model_kwargs:
  static_in_channels: 1
  dynamic_in_channels: 20
  out_channels: 19
  initial_num_fmaps: 20
  fmap_growth: 3
  scale_factor:
  - [1, 3, 3]
  - [1, 2, 2]
  - [1, 2, 2]
  final_activation: Sigmoid
#  conv_type_key: 'vanilla'
  conv_type_key: 'conv_bn'
  add_residual_connections: True
  multiscale: False
  pretrained_model_load_path: '/net/hciserver03/storage/abailoni/learnedHC/new_experiments/fixed_side_loss_smaller/pre_train'


multiscale_loss_kwargs:
  n_scales: 4
  scale_weights: [1., 0.4, 0.1, 0.03]

HC_config:
  training_data_available: True # For inference
  HC_window_size_train: [10, 324, 324] # For the moment it should be equal to the CNN window_size
  HC_window_size_valid: [10, 324, 324]

  dims_prediction_model: 3
  input_channels:
    static_channels:     [['raw']]
    dynamic_channels:    [['raw', 'edge_indicators']]


  # TODO: this should be given by the data_config file
  # TODO: watershed is based on the order of these!
  # FIXME: at the moment the first three offsets are expected to be LOCAL!
  offsets: [[-1, 0, 0], [0, -1, 0], [0, 0, -1], [-2, 0, 0], [0, -3, 0], [0, 0, -3], [-3, 0, 0], [0, -9, 0], [0, 0, -9], [-4, 0, 0], [0, -27, 0], [0, 0, -27]]
  batch_size:  1
  ignore_label: 0

  # Used for affs accumulation, map features back to image, etc:
  nb_threads: 6

  fixation_kwargs:
    p0: 1.0
    p1: 1.0
    zeroInit: False
    weight_mistakes: 50.0
    weight_successes: 3.0
    weight_inner_label: 1.0

  init_segm:
    start_from_pixels: False
    relabel_continuous: False
    max_distance_lifted_edges: 3
    use_wsdt: True
    use_ws: False
    prob_map_kwargs:
#      used_offsets: [1,2,8,9,10,11,12,13,14,15]
#      offset_weights: [1., 1., 0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6]
      used_offsets: [1,2]
      offset_weights: [1., 1.]

    wsdt_kwargs:
      threshold: 0.45 # 0.45 Put close to 0.0 to oversegment (but not too much...?)
      sigma_seeds: 0.0 # 0.
      preserve_membrane: True
      min_segment_size: 0 #0
      stacked_2d: True
      from_boundary_maps: True

#    wsdt_kwargs:
#      threshold: 0.5
#      min_mem: 0 #50
#      min_seg: 0 #75
#      sig_seeds: 0.
#      sig_weights: 0.2
#      groupSeeds: False
#      preserve_membrane_pmaps: True
#      gamma_value: 2.

  max_nb_milesteps: -1

training_optimizer_kwargs:
  #method: AnnealedAdam
  method: Adam
  lr: 0.0001
  #lr_decay: 0.9999568274614672
  ##lr_decay: 0.999948708021091
  weight_decay: 0.0005

devices:
  - 0